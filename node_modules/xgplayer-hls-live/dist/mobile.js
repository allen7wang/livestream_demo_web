(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('xgplayer'), require('xgplayer-transmuxer-context'), require('xgplayer-transmuxer-buffer-track'), require('xgplayer-transmuxer-buffer-xgbuffer'), require('xgplayer-transmuxer-buffer-stream'), require('xgplayer-utils-crypto'), require('xgplayer-transmuxer-demux-m3u8'), require('xgplayer-transmuxer-demux-ts'), require('xgplayer-transmuxer-codec-avc'), require('xgplayer-transmuxer-codec-hevc')) :
  typeof define === 'function' && define.amd ? define(['xgplayer', 'xgplayer-transmuxer-context', 'xgplayer-transmuxer-buffer-track', 'xgplayer-transmuxer-buffer-xgbuffer', 'xgplayer-transmuxer-buffer-stream', 'xgplayer-utils-crypto', 'xgplayer-transmuxer-demux-m3u8', 'xgplayer-transmuxer-demux-ts', 'xgplayer-transmuxer-codec-avc', 'xgplayer-transmuxer-codec-hevc'], factory) :
  (global = global || self, global.HlsLiveMobilePlayer = factory(global.Player, global.Context, global.Tracks, global.XgBuffer, global.Stream, global.Crypto, global.M3U8Parser, global.TsDemuxer, global.xgplayerTransmuxerCodecAvc, global.xgplayerTransmuxerCodecHevc));
}(this, (function (Player, Context, Tracks, XgBuffer, Stream, Crypto, M3U8Parser, TsDemuxer, xgplayerTransmuxerCodecAvc, xgplayerTransmuxerCodecHevc) { 'use strict';

  Player = Player && Object.prototype.hasOwnProperty.call(Player, 'default') ? Player['default'] : Player;
  Context = Context && Object.prototype.hasOwnProperty.call(Context, 'default') ? Context['default'] : Context;
  Tracks = Tracks && Object.prototype.hasOwnProperty.call(Tracks, 'default') ? Tracks['default'] : Tracks;
  XgBuffer = XgBuffer && Object.prototype.hasOwnProperty.call(XgBuffer, 'default') ? XgBuffer['default'] : XgBuffer;
  Stream = Stream && Object.prototype.hasOwnProperty.call(Stream, 'default') ? Stream['default'] : Stream;
  Crypto = Crypto && Object.prototype.hasOwnProperty.call(Crypto, 'default') ? Crypto['default'] : Crypto;
  M3U8Parser = M3U8Parser && Object.prototype.hasOwnProperty.call(M3U8Parser, 'default') ? M3U8Parser['default'] : M3U8Parser;
  TsDemuxer = TsDemuxer && Object.prototype.hasOwnProperty.call(TsDemuxer, 'default') ? TsDemuxer['default'] : TsDemuxer;

  var BROWSER_EVENTS = {
    VISIBILITY_CHANGE: 'VISIBILITY_CHANGE'
  };
  var PLAYER_EVENTS = {
    SEEK: 'SEEK'
  };

  var LOADER_EVENTS = {
    LADER_START: 'LOADER_START',
    LOADER_DATALOADED: 'LOADER_DATALOADED',
    LOADER_COMPLETE: 'LOADER_COMPLETE',
    LOADER_RESPONSE_HEADERS: 'LOADER_RESPONSE_HEADERS',
    LOADER_ERROR: 'LOADER_ERROR'
  };

  var DEMUX_EVENTS = {
    DEMUX_START: 'DEMUX_START',
    DEMUX_COMPLETE: 'DEMUX_COMPLETE',
    DEMUX_ERROR: 'DEMUX_ERROR',
    METADATA_PARSED: 'METADATA_PARSED',
    SEI_PARSED: 'SEI_PARSED',
    VIDEO_METADATA_CHANGE: 'VIDEO_METADATA_CHANGE',
    AUDIO_METADATA_CHANGE: 'AUDIO_METADATA_CHANGE',
    MEDIA_INFO: 'MEDIA_INFO'
  };

  var REMUX_EVENTS = {
    REMUX_METADATA: 'REMUX_METADATA',
    REMUX_MEDIA: 'REMUX_MEDIA',
    MEDIA_SEGMENT: 'MEDIA_SEGMENT',
    REMUX_ERROR: 'REMUX_ERROR',
    INIT_SEGMENT: 'INIT_SEGMENT',
    DETECT_CHANGE_STREAM: 'DETECT_CHANGE_STREAM',
    DETECT_CHANGE_STREAM_DISCONTINUE: 'DETECT_CHANGE_STREAM_DISCONTINUE',
    RANDOM_ACCESS_POINT: 'RANDOM_ACCESS_POINT'
  };

  var MSE_EVENTS = {
    SOURCE_UPDATE_END: 'SOURCE_UPDATE_END',
    MSE_ERROR: 'MSE_ERROR'

    // hls专有events
  };var HLS_EVENTS = {
    RETRY_TIME_EXCEEDED: 'RETRY_TIME_EXCEEDED'
  };

  var CRYTO_EVENTS = {
    START_DECRYPT: 'START_DECRYPT',
    DECRYPTED: 'DECRYPTED'
  };
  var ALLEVENTS = Object.assign({}, LOADER_EVENTS, DEMUX_EVENTS, REMUX_EVENTS, MSE_EVENTS, HLS_EVENTS, PLAYER_EVENTS, BROWSER_EVENTS);

  var FlvAllowedEvents = [];
  var HlsAllowedEvents = [];

  for (var key in ALLEVENTS) {
    if (ALLEVENTS.hasOwnProperty(key)) {
      FlvAllowedEvents.push(ALLEVENTS[key]);
    }
  }

  for (var _key in ALLEVENTS) {
    if (ALLEVENTS.hasOwnProperty(_key)) {
      HlsAllowedEvents.push(ALLEVENTS[_key]);
    }
  }

  var EVENTS = {
    ALLEVENTS: ALLEVENTS,
    HLS_EVENTS: HLS_EVENTS,
    REMUX_EVENTS: REMUX_EVENTS,
    DEMUX_EVENTS: DEMUX_EVENTS,
    MSE_EVENTS: MSE_EVENTS,
    LOADER_EVENTS: LOADER_EVENTS,
    FlvAllowedEvents: FlvAllowedEvents,
    HlsAllowedEvents: HlsAllowedEvents,
    CRYTO_EVENTS: CRYTO_EVENTS,
    PLAYER_EVENTS: PLAYER_EVENTS,
    BROWSER_EVENTS: BROWSER_EVENTS
  };

  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var LOADER_EVENTS$1 = EVENTS.LOADER_EVENTS;
  var READ_STREAM = 0;
  var READ_TEXT = 1;
  var READ_JSON = 2;
  var READ_BUFFER = 3;

  var FetchLoader = function () {
    function FetchLoader(configs) {
      _classCallCheck(this, FetchLoader);

      this.configs = Object.assign({}, configs);
      this.url = null;
      this.status = 0;
      this.error = null;
      this._reader = null;
      this._canceled = false;
      this._destroyed = false;
      this.readtype = this.configs.readtype;
      this.retryTime = this.configs.retryTime === undefined ? 3 : this.configs.retryTime;
      this.buffer = this.configs.buffer || 'LOADER_BUFFER';
      this._loaderTaskNo = 0;
    }

    _createClass(FetchLoader, [{
      key: 'init',
      value: function init() {
        this.on(LOADER_EVENTS$1.LADER_START, this.load.bind(this));
      }
    }, {
      key: 'fetch',
      value: function (_fetch) {
        function fetch(_x, _x2) {
          return _fetch.apply(this, arguments);
        }

        fetch.toString = function () {
          return _fetch.toString();
        };

        return fetch;
      }(function (url, params) {
        var timer = null;
        return Promise.race([fetch(url, params), new Promise(function (resolve, reject) {
          timer = setTimeout(function () {
            reject(new Error('fetch timeout'));
          }, 1e4); // 10s
        })]).then(function (response) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          return response;
        });
      })
    }, {
      key: 'internalLoad',
      value: function internalLoad(url, params, retryTime) {
        var _this2 = this;

        return this.fetch(this.url, params).then(function (response) {
          if (response.ok) {
            _this2.emit(LOADER_EVENTS$1.LOADER_RESPONSE_HEADERS, _this2.TAG, response.headers);
            _this2.status = response.status;
            Promise.resolve().then(function () {
              _this2._onFetchResponse(response);
            });

            return Promise.resolve(response);
          }
          _this2.loading = false;
          if (retryTime-- > 0) {
            _this2.internalLoad(url, params, retryTime);
          } else {
            _this2.emit(LOADER_EVENTS$1.LOADER_ERROR, _this2.TAG, new Error(response.status + ' (' + response.statusText + ')'));
          }
        }).catch(function (error) {
          _this2.loading = false;
          if (retryTime-- > 0) {
            _this2.internalLoad(url, params, retryTime);
          } else {
            _this2.emit(LOADER_EVENTS$1.LOADER_ERROR, _this2.TAG, error);
            throw error;
          }
        });
      }
    }, {
      key: 'load',
      value: function load(url, opts) {
        this.url = url;

        this._canceled = false;

        // TODO: Add Ranges
        var params = this.getParams(opts);
        this.loading = true;
        this.internalLoad(url, params, this.retryTime);
      }
    }, {
      key: '_onFetchResponse',
      value: function _onFetchResponse(response) {
        var _this = this;
        var buffer = this._context.getInstance(this.buffer);
        this._loaderTaskNo++;
        var taskno = this._loaderTaskNo;
        if (response.ok === true) {
          switch (this.readtype) {
            case READ_JSON:
              response.json().then(function (data) {
                _this.loading = false;
                if (!_this._canceled && !_this._destroyed) {
                  if (buffer) {
                    buffer.push(data);
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, buffer);
                  } else {
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, data);
                  }
                }
              });
              break;
            case READ_TEXT:
              response.text().then(function (data) {
                _this.loading = false;
                if (!_this._canceled && !_this._destroyed) {
                  if (buffer) {
                    buffer.push(data);
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, buffer);
                  } else {
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, data);
                  }
                }
              });
              break;
            case READ_BUFFER:
              response.arrayBuffer().then(function (data) {
                _this.loading = false;
                if (!_this._canceled && !_this._destroyed) {
                  if (buffer) {
                    buffer.push(new Uint8Array(data));
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, buffer);
                  } else {
                    _this.emit(LOADER_EVENTS$1.LOADER_COMPLETE, data);
                  }
                }
              });
              break;
            case READ_STREAM:
            default:
              return this._onReader(response.body.getReader(), taskno);
          }
        }
      }
    }, {
      key: '_onReader',
      value: function _onReader(reader, taskno) {
        var _this3 = this;

        var buffer = this._context.getInstance(this.buffer);
        if (!buffer && this._reader || this._destroyed) {
          try {
            this._reader.cancel();
          } catch (e) {
            // DO NOTHING
          }
        }

        this._reader = reader;
        if (this.loading === false) {
          return;
        }

        // reader read function returns a Promise. get data when callback and has value.done when disconnected.
        // read方法返回一个Promise. 回调中可以获取到数据。当value.done存在时，说明链接断开。
        this._reader && this._reader.read().then(function (val) {
          if (_this3._canceled || _this3._destroyed) {
            if (_this3._reader) {
              try {
                _this3._reader.cancel();
              } catch (e) {
                // DO NOTHING
              }
            }
            return;
          }
          if (val.done) {
            _this3.loading = false;
            _this3.status = 0;
            Promise.resolve().then(function () {
              _this3.emit(LOADER_EVENTS$1.LOADER_COMPLETE, buffer);
            });
            return;
          }

          buffer.push(val.value);
          Promise.resolve().then(function () {
            _this3.emit(LOADER_EVENTS$1.LOADER_DATALOADED, buffer);
          });
          return _this3._onReader(reader, taskno);
        }).catch(function (error) {
          _this3.loading = false;
          _this3.emit(LOADER_EVENTS$1.LOADER_ERROR, _this3.TAG, error);
          throw error;
        });
      }
    }, {
      key: 'getParams',
      value: function getParams(opts) {
        var options = Object.assign({}, opts);
        var headers = new Headers();

        var params = {
          method: 'GET',
          headers: headers,
          mode: 'cors',
          cache: 'default'

          // add custmor headers
          // 添加自定义头
        };if (_typeof(this.configs.headers) === 'object') {
          var configHeaders = this.configs.headers;
          for (var key in configHeaders) {
            if (configHeaders.hasOwnProperty(key)) {
              headers.append(key, configHeaders[key]);
            }
          }
        }

        if (_typeof(options.headers) === 'object') {
          var optHeaders = options.headers;
          for (var _key in optHeaders) {
            if (optHeaders.hasOwnProperty(_key)) {
              headers.append(_key, optHeaders[_key]);
            }
          }
        }

        if (options.cors === false) {
          params.mode = 'same-origin';
        }

        // withCredentials is disabled by default
        // withCredentials 在默认情况下不被使用。
        if (options.withCredentials) {
          params.credentials = 'include';
        }

        // TODO: Add ranges;
        return params;
      }
    }, {
      key: 'cancel',
      value: function cancel() {
        if (this._reader) {
          try {
            this._reader.cancel();
          } catch (e) {
            // 防止failed: 200错误被打印到控制台上
          }
          this._reader = null;
          this.loading = false;
        }
        this._canceled = true;
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this._destroyed = true;
        this.cancel();
      }
    }], [{
      key: 'type',
      get: function get() {
        return 'loader';
      }
    }]);

    return FetchLoader;
  }();

  var _createClass$1 = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  }();

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Playlist = function () {
    function Playlist(configs) {
      _classCallCheck$1(this, Playlist);

      this._baseURL = '';
      this._list = {};
      this._ts = {};
      this.version = 0;
      this.sequence = -1;
      this.targetduration = 0;
      this.duration = 0;
      this.fragLength = 0;
      this._lastget = undefined;
      this._audoclear = configs.autoclear || false;
      this.downloadedUrls = [];
    }

    _createClass$1(Playlist, [{
      key: 'push',
      value: function push(ts, duration, discontinue) {
        if (!this._ts[ts]) {
          this._ts[ts] = { duration: duration,
            downloaded: false,
            downloading: false,
            start: this.duration,
            discontinue: !!discontinue
          };
          this._list[this.duration] = ts;
          this.duration += duration;
          this.fragLength += 1;
        }
      }
    }, {
      key: 'deleteFrag',
      value: function deleteFrag(url) {
        if (this._ts[url]) {
          if (this._ts[url].start > this._lastget.time) {
            this._lastget = {
              duration: this._ts[url].duration,
              time: this._ts[url].start,
              downloaded: false,
              downloading: false,
              url: url
            };
          }
          delete this._list[this._ts[url].start];
          delete this._ts[url];
          this.fragLength -= 1;
        }
      }
    }, {
      key: 'pushM3U8',
      value: function pushM3U8(data, deletepre) {
        // 常规信息替换
        if (!data) {
          throw new Error('No m3u8 data received.');
        }
        this.version = data.version;
        this.targetduration = data.targetduration;
        if (data.encrypt && !this.encrypt) {
          this.encrypt = data.encrypt;
        }

        if (!data.sequence) {
          data.sequence = 0;
        }

        // 新分片信息
        if (data.sequence >= this.sequence) {
          this.sequence = data.sequence;
          var newfraglist = [];
          for (var i = 0; i < data.frags.length; i++) {
            var frag = data.frags[i];
            if (!this._ts[frag.url] && this.downloadedUrls.indexOf(frag.url) < 0) {
              newfraglist.push(frag.url);
              this.push(frag.url, frag.duration, frag.discontinue);
            }
          }

          if (newfraglist.length < 1) {
            throw new Error('Can not read ts file list.');
          }

          if (deletepre) {
            var tslist = this.getTsList();
            for (var _i = 0; _i < tslist.length; _i++) {
              if (newfraglist.indexOf(tslist[_i]) < 0) {
                this.deleteFrag(tslist[_i]);
              }
            }
          }
        } else {
          throw new Error('Old m3u8 file received, ' + data.sequence);
        }
      }
    }, {
      key: 'getTsList',
      value: function getTsList() {
        return Object.keys(this._ts);
      }
    }, {
      key: 'downloaded',
      value: function downloaded(tsname, isloaded) {
        var ts = this._ts[tsname];
        if (ts) {
          ts.downloaded = isloaded;
        }
      }
    }, {
      key: 'downloading',
      value: function downloading(tsname, loading) {
        var ts = this._ts[tsname];
        if (ts) {
          ts.downloading = loading;
        }
      }
    }, {
      key: 'getTsByName',
      value: function getTsByName(name) {
        return this._ts[name];
      }
    }, {
      key: 'getTs',
      value: function getTs(time) {
        var timelist = Object.keys(this._list);
        var ts = void 0;

        if (time === undefined) {
          if (this._lastget) {
            time = this._lastget.time + this._lastget.duration;
          } else {
            time = 0;
          }
        }

        if (timelist.length < 1 || time >= this.duration) {
          return undefined;
        }
        timelist = timelist.sort(function (a, b) {
          return parseFloat(a) - parseFloat(b);
        });
        for (var i = 0; i < timelist.length; i++) {
          if (time >= parseInt(timelist[i])) {
            var url = this._list[timelist[i]];
            var downloaded = this._ts[url].downloaded;
            var downloading = this._ts[url].downloading;
            ts = { url: url, downloaded: downloaded, downloading: downloading, time: parseInt(timelist[i]), duration: parseInt(this._ts[url].duration) };
            if (this.autoclear) {
              delete this._ts[this._lastget.url];
              delete this._list[this._lastget.time];
            }
            this._lastget = ts;
          } else {
            break;
          }
        }
        if (ts) {
          this.downloadedUrls.push(ts.url);
        }
        return ts;
      }
    }, {
      key: 'getLastDownloadedTs',
      value: function getLastDownloadedTs() {
        var timelist = Object.keys(this._list);
        var found = void 0;
        for (var i = 0; i < timelist.length; i++) {
          var url = this._list[timelist[i]];
          var downloaded = this._ts[url].downloaded;
          var downloading = this._ts[url].downloading;
          if (downloaded) {
            found = { url: url, downloaded: downloaded, downloading: downloading, time: parseInt(timelist[i]), duration: parseInt(this._ts[url].duration) };
          } else {
            break;
          }
        }

        return found;
      }
    }, {
      key: 'clear',
      value: function clear() {
        this._baseURL = '';
        this._list = {};
        this._ts = {};
        this.version = 0;
        this.sequence = -1;
        this.targetduration = 0;
        this.duration = 0;
      }
    }, {
      key: 'clearDownloaded',
      value: function clearDownloaded() {
        for (var i = 0, l = Object.keys(this._ts).length; i < l; i++) {
          var ts = this._ts[Object.keys(this._ts)[i]];
          ts.downloaded = false;
          ts.downloading = false;
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this._baseURL = '';
        this._list = {};
        this._ts = {};
        this.version = 0;
        this.sequence = -1;
        this.targetduration = 0;
        this.duration = 0;
        this.fragLength = 0;
        this._lastget = undefined;
        this._audoclear = false;
      }
    }, {
      key: 'list',
      get: function get() {
        return this._list;
      }
    }, {
      key: 'baseURL',
      set: function set(baseURL) {
        if (this.baseURL !== baseURL) {
          this.clear();
          this._baseURL = baseURL;
        }
      },
      get: function get() {
        return this._baseURL;
      }
    }]);

    return Playlist;
  }();

  var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var LOADER_EVENTS$2 = EVENTS.LOADER_EVENTS;
  var DEMUX_EVENTS$1 = EVENTS.DEMUX_EVENTS;
  var HLS_EVENTS$1 = EVENTS.HLS_EVENTS;
  var CRYTO_EVENTS$1 = EVENTS.CRYTO_EVENTS;
  var HLS_ERROR = 'HLS_ERROR';

  var HlsLiveController = function () {
    function HlsLiveController(configs) {
      _classCallCheck$2(this, HlsLiveController);

      this.configs = Object.assign({}, configs);
      this.url = '';
      this.baseurl = '';
      this.sequence = 0;
      this._playlist = null;
      this.retrytimes = this.configs.retrytimes || 3;
      this.preloadTime = this.configs.preloadTime;
      this._m3u8lasttime = 0;
      this._timmer = setInterval(this._checkStatus.bind(this), 50);
      this._lastCheck = 0;
      this._player = this.configs.player;
      this.m3u8Text = null;

      this.setDataInterval = null;
    }

    _createClass$2(HlsLiveController, [{
      key: 'init',
      value: function init() {
        // 初始化Buffer （M3U8/TS/Playlist);
        this._context.registry('M3U8_BUFFER', XgBuffer);
        this._context.registry('TS_BUFFER', XgBuffer);
        this._context.registry('TRACKS', Tracks);

        this._playlist = this._context.registry('PLAYLIST', Playlist)({ autoclear: true });

        // 初始化M3U8Loader;
        this._m3u8loader = this._context.registry('M3U8_LOADER', FetchLoader)({ buffer: 'M3U8_BUFFER', readtype: 1, retryTime: 0 });
        this._tsloader = this._context.registry('TS_LOADER', FetchLoader)({ buffer: 'TS_BUFFER', readtype: 3, retryTime: 1 });

        // 初始化TS Demuxer
        this._context.registry('TS_DEMUXER', TsDemuxer)({ inputbuffer: 'TS_BUFFER' });

        this.initEvents();
      }
    }, {
      key: 'initEvents',
      value: function initEvents() {
        this.on(LOADER_EVENTS$2.LOADER_COMPLETE, this._onLoadComplete.bind(this));

        this.on(DEMUX_EVENTS$1.METADATA_PARSED, this._onMetadataParsed.bind(this));

        this.on(DEMUX_EVENTS$1.SEI_PARSED, this._handleSEIParsed.bind(this));

        this.on(DEMUX_EVENTS$1.DEMUX_COMPLETE, this._onDemuxComplete.bind(this));

        this.on(LOADER_EVENTS$2.LOADER_ERROR, this._onLoadError.bind(this));

        this.on(DEMUX_EVENTS$1.DEMUX_ERROR, this._onDemuxError.bind(this));
      }
    }, {
      key: '_onError',
      value: function _onError(type, mod, err, fatal) {
        var error = {
          errorType: type,
          errorDetails: '[' + mod + ']: ' + (err ? err.message : ''),
          errorFatal: fatal
        };
        this._player.emit(HLS_ERROR, error);
      }
    }, {
      key: '_onDemuxComplete',
      value: function _onDemuxComplete() {
        var _this = this;

        if (this._player.video) {
          var _context$getInstance = this._context.getInstance('TRACKS'),
              videoTrack = _context$getInstance.videoTrack,
              audioTrack = _context$getInstance.audioTrack;

          videoTrack.samples.forEach(function (sample) {
            if (sample.analyzed) {
              return;
            }
            sample.analyzed = true;
            var buffer = new Stream(sample.data.buffer);
            var nals = void 0;
            if (_this._isHEVC(videoTrack.meta)) {
              nals = xgplayerTransmuxerCodecHevc.NalUnitHEVC.getHvccNals(buffer);
            } else {
              nals = xgplayerTransmuxerCodecAvc.NalUnit.getAvccNals(buffer);
            }
            var nalsLength = nals.reduce(function (len, current) {
              return len + 4 + current.body.byteLength;
            }, 0);
            var newData = new Uint8Array(nalsLength);
            var offset = 0;
            nals.forEach(function (nal) {
              newData.set([0, 0, 0, 1], offset);
              offset += 4;
              newData.set(new Uint8Array(nal.body), offset);
              offset += nal.body.byteLength;
            });

            sample.data = newData;
          });
          if (this.setDataInterval) {
            return;
          }
          this.setDataInterval = setInterval(function () {
            if (videoTrack.samples.length || audioTrack.samples.length) {
              _this._player.video.onDemuxComplete(videoTrack, audioTrack);
            } else {
              clearInterval(_this.setDataInterval);
              _this.setDataInterval = null;
            }
          }, 200);
        }
      }
    }, {
      key: '_onMetadataParsed',
      value: function _onMetadataParsed(type) {
        if (type === 'audio') {
          // 将音频meta信息交给audioContext，不走remux封装
          var _context$getInstance2 = this._context.getInstance('TRACKS'),
              audioTrack = _context$getInstance2.audioTrack;

          if (audioTrack && audioTrack.meta) {
            this._setMetaToAudio(audioTrack.meta);
          }
        } else {
          var _context$getInstance3 = this._context.getInstance('TRACKS'),
              videoTrack = _context$getInstance3.videoTrack;

          if (videoTrack && videoTrack.meta) {
            this._setMetaToVideo(videoTrack.meta);
          }
        }
      }
    }, {
      key: '_setMetaToAudio',
      value: function _setMetaToAudio(audioMeta) {
        if (this._player.video) {
          this._player.video.setAudioMeta(audioMeta);
        }
      }
    }, {
      key: '_setMetaToVideo',
      value: function _setMetaToVideo(videoMeta) {
        if (this._player.video) {
          this._player.video.setVideoMeta(videoMeta);
        }
      }
    }, {
      key: '_onLoadError',
      value: function _onLoadError(loader, error) {
        if (loader !== 'M3U8_LOADER') {
          this.retrytimes = 3;
          return;
        }
        if (!this._tsloader.loading && !this._m3u8loader.loading && this.retrytimes > 1) {
          this.retrytimes--;
          this._onError(LOADER_EVENTS$2.LOADER_ERROR, loader, error, false);
        } else if (this.retrytimes <= 1) {
          this.retrytimes--;
          this._onError(LOADER_EVENTS$2.LOADER_ERROR, loader, error, true);
          this.emit(HLS_EVENTS$1.RETRY_TIME_EXCEEDED);
          if (this._player.video) {
            this._player.video.handleEnded();
          }
        }
      }
    }, {
      key: '_onDemuxError',
      value: function _onDemuxError(mod, error, fatal) {
        if (fatal === undefined) {
          fatal = true;
        }
        this._onError(LOADER_EVENTS$2.LOADER_ERROR, mod, error, fatal);
      }
    }, {
      key: '_handleSEIParsed',
      value: function _handleSEIParsed(sei) {
        this._player.emit('SEI_PARSED', sei);
      }
    }, {
      key: '_onLoadComplete',
      value: function _onLoadComplete(buffer) {
        if (buffer.TAG === 'M3U8_BUFFER') {
          var mdata = void 0;
          try {
            this.m3u8Text = buffer.shift();
            mdata = M3U8Parser.parse(this.m3u8Text, this.baseurl);
          } catch (error) {
            this._onError('M3U8_PARSER_ERROR', 'M3U8_PARSER', error, false);
          }

          if (!mdata) {
            if (this.retrytimes > 0) {
              this.retrytimes--;
              this._preload();
            } else {
              this.emit(HLS_EVENTS$1.RETRY_TIME_EXCEEDED);
              if (this._player.video) {
                this._player.video.handleEnded();
              }
            }
            return;
          }

          try {
            this._playlist.pushM3U8(mdata, true);
          } catch (error) {
            this._onError('M3U8_PARSER_ERROR', 'PLAYLIST', error, false);
          }

          if (this._playlist.encrypt && this._playlist.encrypt.uri && !this._playlist.encrypt.key) {
            this._context.registry('DECRYPT_BUFFER', XgBuffer)();
            this._context.registry('KEY_BUFFER', XgBuffer)();
            this._tsloader.buffer = 'DECRYPT_BUFFER';
            this._keyLoader = this._context.registry('KEY_LOADER', FetchLoader)({ buffer: 'KEY_BUFFER', readtype: 3 });
            this.emitTo('KEY_LOADER', LOADER_EVENTS$2.LADER_START, this._playlist.encrypt.uri);
          } else {
            this._m3u8Loaded(mdata);
          }
        } else if (buffer.TAG === 'TS_BUFFER') {
          this.retrytimes = this.configs.retrytimes || 3;
          this._playlist.downloaded(this._tsloader.url, true);
          this.emit(DEMUX_EVENTS$1.DEMUX_START);
        } else if (buffer.TAG === 'DECRYPT_BUFFER') {
          this.retrytimes = this.configs.retrytimes || 3;
          this._playlist.downloaded(this._tsloader.url, true);
          this.emitTo('CRYPTO', CRYTO_EVENTS$1.START_DECRYPT);
        } else if (buffer.TAG === 'KEY_BUFFER') {
          this.retrytimes = this.configs.retrytimes || 3;
          this._playlist.encrypt.key = buffer.shift();
          this._crypto = this._context.registry('CRYPTO', Crypto)({
            key: this._playlist.encrypt.key,
            iv: this._playlist.encrypt.ivb,
            method: this._playlist.encrypt.method,
            inputbuffer: 'DECRYPT_BUFFER',
            outputbuffer: 'TS_BUFFER'
          });
          this._crypto.on(CRYTO_EVENTS$1.DECRYPTED, this._onDcripted.bind(this));
        }
      }
    }, {
      key: '_onDcripted',
      value: function _onDcripted() {
        this.emit(DEMUX_EVENTS$1.DEMUX_START);
      }
    }, {
      key: '_m3u8Loaded',
      value: function _m3u8Loaded(mdata) {
        if (!this.preloadTime) {
          this.preloadTime = this._playlist.targetduration ? this._playlist.targetduration : 5;
        }
        if (this._playlist.fragLength > 0 && this._playlist.sequence < mdata.sequence) {
          this.retrytimes = this.configs.retrytimes || 3;
        } else {
          if (this.retrytimes > 0) {
            this.retrytimes--;
            this._preload();
          } else {
            this.emit(HLS_EVENTS$1.RETRY_TIME_EXCEEDED);
            if (this._player.video) {
              this._player.video.handleEnded();
            }
          }
        }
      }
    }, {
      key: '_checkStatus',
      value: function _checkStatus() {
        if (this._player.paused) {
          return;
        }

        if (this.retrytimes < 1 && new Date().getTime() - this._lastCheck < 4000) {
          return;
        } else if (this.retrytimes < 1) {
          window.clearInterval(this._timmer);
        }
        this._lastCheck = new Date().getTime();
        if (this._player.buffered.length < 1) {
          this._preload();
        } else {
          // Check for load.
          var currentTime = this._player.currentTime;
          var bufferstart = this._player.buffered.start(this._player.buffered.length - 1);
          if (this._player.readyState <= 2) {
            if (currentTime < bufferstart) {
              this._player.currentTime = bufferstart;
              currentTime = bufferstart;
            } else {
              this._preload();
            }
          }
          var bufferend = this._player.buffered.end(this._player.buffered.length - 1);
          if (currentTime > bufferend - this.preloadTime) {
            this._preload();
          }
        }
      }
    }, {
      key: '_preload',
      value: function _preload() {
        if (this.retrytimes < 1 || this._tsloader.loading || this._m3u8loader.loading) {
          return;
        }
        var frag = this._playlist.getTs();

        if (frag && !frag.downloaded && !frag.downloading) {
          this._playlist.downloading(frag.url, true);
          this.emitTo('TS_LOADER', LOADER_EVENTS$2.LADER_START, frag.url);
        } else {
          var preloadTime = this.preloadTime ? this.preloadTime : 0;
          var current = new Date().getTime();
          if ((!frag || frag.downloaded) && (current - this._m3u8lasttime) / 1000 > preloadTime) {
            this._m3u8lasttime = current;
            this.emitTo('M3U8_LOADER', LOADER_EVENTS$2.LADER_START, this.url);
          }
        }
      }
    }, {
      key: '_isHEVC',
      value: function _isHEVC(meta) {
        return meta && meta.codec === 'hev1.1.6.L93.B0';
      }
    }, {
      key: 'load',
      value: function load(url) {
        this.baseurl = M3U8Parser.parseURL(url);
        this.url = url;
        this._preload();
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        clearInterval(this._timmer);
        this.off(LOADER_EVENTS$2.LOADER_COMPLETE, this._onLoadComplete);
        // this.off(REMUX_EVENTS.REMUX_ERROR);
        this.off(DEMUX_EVENTS$1.METADATA_PARSED, this._onMetadataParsed);
        this.off(DEMUX_EVENTS$1.DEMUX_COMPLETE, this._onDemuxComplete);

        this.m3u8Text = null;
      }
    }]);

    return HlsLiveController;
  }();

  var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  var hlsAllowedEvents = EVENTS.HlsAllowedEvents;
  var BasePlugin = Player.BasePlugin;

  var HlsPlayer = function (_BasePlugin) {
    _inherits(HlsPlayer, _BasePlugin);

    function HlsPlayer() {
      _classCallCheck$3(this, HlsPlayer);

      return _possibleConstructorReturn(this, (HlsPlayer.__proto__ || Object.getPrototypeOf(HlsPlayer)).apply(this, arguments));
    }

    _createClass$3(HlsPlayer, [{
      key: 'beforePlayerInit',
      value: function beforePlayerInit() {
        var player = this.player;

        if (player.video) {
          player.video.setAttribute('preloadtime', this.config.preloadTime);
        }
        this.context = new Context(hlsAllowedEvents);
        this.initHls();
        this.context.init();
        this.loadData();
        this.initEvents();
      }
    }, {
      key: 'afterCreate',
      value: function afterCreate() {
        var _player = this.player,
            video = _player.video,
            config = _player.config;

        video.width = Number.parseInt(config.width || 600);
        video.height = Number.parseInt(config.height || 337.5);
        video.style.outline = 'none';
      }
    }, {
      key: 'initEvents',
      value: function initEvents() {
        var _this2 = this;

        this.play = this.play.bind(this);

        var player = this.player;


        player.on('seeking', function () {
          var time = _this2.currentTime;
          var range = player.getBufferedRange();
          if (time > range[1] || time < range[0]) {
            _this2.hls.seek(_this2.currentTime);
          }
        });

        player.on('play', this.play);
      }
    }, {
      key: 'initHls',
      value: function initHls() {
        var player = this.player,
            config = this.config;

        this.hls = this.context.registry('HLS_CONTROLLER', HlsLiveController)({ player: player, preloadTime: config.preloadTime, retryTimes: config.retryTimes });
      }
    }, {
      key: 'play',
      value: function play() {
        if (this.hls) {
          this.hls._onMetadataParsed('video');
          this.hls._onMetadataParsed('audio');
        }
      }
    }, {
      key: 'loadData',
      value: function loadData() {
        var player = this.player;

        if (this.hls) {
          this.hls.load(player.config.url);
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this._destroy();
      }
    }, {
      key: 'addLiveFlag',
      value: function addLiveFlag() {
        var player = this.player;

        Player.Util.addClass(player.root, 'xgplayer-is-live');
      }
    }, {
      key: '_destroy',
      value: function _destroy() {
        this.context.destroy();
        this.hls = null;
        this.context = null;
      }
    }, {
      key: 'switchURL',
      value: function switchURL(url) {
        var context = new Context(hlsAllowedEvents);
        var hls = context.registry('FLV_CONTROLLER', FLV)(this.player);
        context.init();
        this.this.hls = hls;
        this.initFlvBackupEvents(hls, context);
        hls.loadData(url);
      }
    }, {
      key: 'src',
      get: function get() {
        return this.player.currentSrc;
      },
      set: function set(url) {
        this.switchURL(url);
      }
    }], [{
      key: 'isSupported',
      value: function isSupported() {
        var wasmSupported = 'WebAssembly' in window;
        var WebComponentSupported = 'customElements' in window && window.customElements.define;
        var isComponentDefined = void 0;
        if (WebComponentSupported) {
          isComponentDefined = window.customElements.get('mobile-video');
        }
        return wasmSupported && isComponentDefined;
      }
    }, {
      key: 'pluginName',
      get: function get() {
        return 'hlsLiveMobile';
      }
    }, {
      key: 'defaultConfig',
      get: function get() {
        return {
          preloadTime: 4
        };
      }
    }]);

    return HlsPlayer;
  }(BasePlugin);

  return HlsPlayer;

})));
